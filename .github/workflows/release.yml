name: "Build boringNotch"
on:
  issue_comment:
    types: [created]

concurrency:
  group: build-boringnotch-${{ github.ref }}
  cancel-in-progress: true

env:
  projname: boringNotch
  beta-channel-name: "beta"
  EXPORT_METHOD: "development"

jobs:
  preparation:
    name: Preparation job
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/build') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
    outputs:
      is_beta: ${{ steps.check-beta.outputs.is_beta }}
      version: ${{ steps.extract-version.outputs.version }}
      build_number: ${{ steps.extract-version.outputs.build_number }}
    steps:
      - name: Check if beta
        id: check-beta
        run: |
          if [[ "${{ contains(github.event.comment.body, 'beta') }}" == "true" ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
            echo "env=build-beta" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
            echo "env=build-release" >> $GITHUB_OUTPUT
          fi
      - uses: xt0rted/pull-request-comment-branch@v1 # check out branch of PR
        id: comment-branch
      - name: Add reactions # adding reactions to the comment to show that the action is running
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes
      - uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const commenter = context.payload.comment.user.login;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Check the commenter's repository permission level (need write or admin)
            try {
              const perm = await github.rest.repos.getCollaboratorPermissionLevel({ owner, repo, username: commenter });
              const level = perm.data.permission; // admin, write, read, none
              if (level !== 'admin') {
                core.setFailed("Commenter is not an admin on the repository");
              }
            } catch (err) {
              core.setFailed("Failed to determine collaborator permission level: " + err.message);
            }

            // Check if the PR is ready to be merged
            const pr = await github.rest.pulls.get({
              owner: owner,
              repo: repo,
              pull_number: context.issue.number,
            });
            if (pr.data.draft || !pr.data.mergeable) {
              core.setFailed("PR is not ready to be merged");
            }
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - name: Extract version from comment or Xcode project
        id: extract-version
        run: |
          # Check if version is provided in comment
          COMMENT_BODY="${{ github.event.comment.body }}"
          
          # Extract version from comment using regex (supports formats like v2.6, 1.3, 2.6-rc.5)
          VERSION_FROM_COMMENT=$(echo "$COMMENT_BODY" | grep -oE 'v?[0-9]+(\.[0-9]+)*(-rc\.[0-9]+)?' | head -1 | sed 's/^v//')
          
          if [[ -n "$VERSION_FROM_COMMENT" ]]; then
            echo "Using version from comment: $VERSION_FROM_COMMENT"
            VERSION="$VERSION_FROM_COMMENT"
          else
            # Extract from Xcode project
            VERSION=$(grep -m1 'MARKETING_VERSION = ' ${{ env.projname }}.xcodeproj/project.pbxproj | sed 's/.*MARKETING_VERSION = \([^;]*\);.*/\1/' | tr -d '"')
            echo "Using version from Xcode: $VERSION"
          fi
          
          # Generate build number from version
          # Convert version like "2.6" -> "2060000" or "1.3.2-rc.5" -> "1030205"
          BUILD_NUMBER=$(python3 .github/scripts/generate_build_number.py "$VERSION")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Generated build number: $BUILD_NUMBER for version: $VERSION"

  build:
    name: Build and sign app
    runs-on: macos-latest
    needs: preparation
    env:
      DEVELOPMENT_TEAM: ${{ vars.DEVELOPMENT_TEAM_ID }}
      CODE_SIGN_IDENTITY: "Apple Development"
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1 # check out branch of PR
        id: comment-branch
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Switch Xcode version
        run: |
          sudo xcode-select -s "/Applications/Xcode_16.4.app"
          /usr/bin/xcodebuild -version
      - name: Set build number in project
        run: |
          # Set the build number (CURRENT_PROJECT_VERSION)
          sed -i '' "s/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = ${{ needs.preparation.outputs.build_number }}/g" ${{ env.projname }}.xcodeproj/project.pbxproj
          echo "Set build number to: ${{ needs.preparation.outputs.build_number }}"
      - name: Build and archive # create archive
        run: |
          # Ensure the archive is created with an explicit team and code sign identity
          xcodebuild clean archive \
            -project ${{ env.projname }}.xcodeproj \
            -scheme ${{ env.projname }} \
            -archivePath ${{ env.projname }} \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            -allowProvisioningUpdates
      - name: Export app # create .app
        env:
          DEVELOPMENT_TEAM: ${{ vars.DEVELOPMENT_TEAM_ID }}
        run: |
          # Create export options plist in temporary directory to avoid modifying the repo
          TEMP_PLIST="$RUNNER_TEMP/export_options.plist"
          cat > "$TEMP_PLIST" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>teamID</key>
            <string>$DEVELOPMENT_TEAM</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive -archivePath "${{ env.projname }}.xcarchive" -exportPath Release -exportOptionsPlist "$TEMP_PLIST"
      - name: Sign with Sparkle EdDSA key (for future use)
        env:
          PRIVATE_SPARKLE_KEY: ${{ secrets.PRIVATE_SPARKLE_KEY }}
        run: |
          echo -n "$PRIVATE_SPARKLE_KEY" > ./sparkle_private_key
          # Create signature file for future Sparkle integration
          if command -v ./Configuration/generate_appcast >/dev/null 2>&1; then
            ./Configuration/generate_appcast --ed-key-file sparkle_private_key --generate-signatures Release/
          else
            echo "Sparkle generate_appcast not found - skipping signature generation"
          fi
          rm sparkle_private_key
      - name: Create DMG
        run: |
          cd Release
          # Create a simple DMG (you may want to customize this with a background image, etc.)
          hdiutil create -volname "boringNotch ${{ needs.preparation.outputs.version }}" \
                          -srcfolder "${{ env.projname }}.app" \
                          -ov -format UDZO \
                          "${{ env.projname }}.dmg"
      - name: Upload built app
        uses: actions/upload-artifact@master
        with:
          name: app-${{ needs.preparation.outputs.version }}
          path: |
            Release/${{ env.projname }}.dmg
            Release/${{ env.projname }}.app

  ending:
    name: Ending job
    if: ${{ always() && github.event.issue.pull_request && contains(github.event.comment.body, '/build') }}
    runs-on: ubuntu-latest
    needs: [preparation, build]
    steps:
      - uses: actions/download-artifact@master
        with:
          path: artifacts
      - name: Add success reactions
        if: ${{ needs.build.result == 'success' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket
      - name: Add negative reaction
        if: ${{ needs.build.result == 'failure' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: confused
      - name: Update deployment status (failure)
        uses: bobheadxi/deployments@v1
        if: ${{ needs.build.result == 'failure' }}
        with:
            step: finish
            token: ${{ secrets.GITHUB_TOKEN }}
            status: failure
            env: ${{ needs.preparation.outputs.is_beta == 'true' && 'build-beta' || 'build-release' }}
            deployment_id: ${{ steps.info.outputs.deployment_id }}
      - name: Create summary
        run: |
          BUILD_TYPE="stable"
          if [[ "${{ needs.preparation.outputs.is_beta }}" == "true" ]]; then
            BUILD_TYPE="beta"
          fi
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Successfully built boringNotch v${{ needs.preparation.outputs.version }} ($BUILD_TYPE build ${{ needs.preparation.outputs.build_number }})" >> $GITHUB_STEP_SUMMARY
            echo "📦 DMG and app files are available in the artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed for boringNotch v${{ needs.preparation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
